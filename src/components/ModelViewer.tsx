import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useGameStore } from '../stores/gameStore';

interface ModelViewerProps {
  excitement: number;
  onActionPerformed?: () => void;
}

const ModelViewer: React.FC<ModelViewerProps> = ({ excitement, onActionPerformed }) => {
  const { currentVideo, getAffomelodyURL } = useGameStore();
  const [showSimulatorOverlay, setShowSimulatorOverlay] = useState(false);
  const [isMuted, setIsMuted] = useState(true); // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∑–≤—É–∫–∞
  const [volume, setVolume] = useState(0); // –ì—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ –º–∏–Ω–∏–º—É–º–µ
  const [showVolumeSlider, setShowVolumeSlider] = useState(false); // –ü–æ–∫–∞–∑ –ø–æ–ª–∑—É–Ω–∫–∞
  const videoRef = useRef<HTMLVideoElement>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  const handleVolumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newVolume = parseFloat(e.target.value);
    setVolume(newVolume);
    if (videoRef.current) {
      videoRef.current.volume = newVolume;
      if (newVolume > 0) {
        videoRef.current.muted = false;
        setIsMuted(false);
      } else {
        videoRef.current.muted = true;
        setIsMuted(true);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–æ–ª–∑—É–Ω–∫–∞
  const toggleVolumeSlider = () => {
    setShowVolumeSlider(!showVolumeSlider);
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –≤ –∫–æ–Ω—Ü–µ –≤–∏–¥–µ–æ usual.mp4 (1:40 = 100 —Å–µ–∫—É–Ω–¥)
  useEffect(() => {
    const video = videoRef.current;
    if (!video) return;

    const handleTimeUpdate = () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ usual.mp4
      if (currentVideo === '/videos/actions/usual.mp4') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –∑–∞ 5 —Å–µ–∫—É–Ω–¥ –¥–æ –∫–æ–Ω—Ü–∞ –≤–∏–¥–µ–æ (–≤ 95 —Å–µ–∫—É–Ω–¥–µ)
        if (video.currentTime >= 95) {
          setShowSimulatorOverlay(true);
        }
      }
    };

    video.addEventListener('timeupdate', handleTimeUpdate);
    return () => video.removeEventListener('timeupdate', handleTimeUpdate);
  }, [currentVideo]);

  // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏
  useEffect(() => {
    // –°–Ω–∏–º–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è
    if (onActionPerformed) {
      setShowSimulatorOverlay(false);
    }

    let timer: number;

    if (currentVideo === '/videos/actions/usual.mp4') {
      // –î–ª—è usual.mp4 - –∑–∞–≥–ª—É—à–∫–∞ —á–µ—Ä–µ–∑ 100 —Å–µ–∫—É–Ω–¥ (1:40)
      timer = setTimeout(() => {
        setShowSimulatorOverlay(true);
      }, 100000); // 100 —Å–µ–∫—É–Ω–¥ = 1:40
    } else {
      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ - –∑–∞–≥–ª—É—à–∫–∞ —á–µ—Ä–µ–∑ 18 —Å–µ–∫—É–Ω–¥
      timer = setTimeout(() => {
        setShowSimulatorOverlay(true);
      }, 18000); // 18 —Å–µ–∫—É–Ω–¥
    }

    return () => clearTimeout(timer);
  }, [currentVideo, onActionPerformed]);

  return (
    <div className="video-stream-container">
      <div className="video-content-wrapper">
        <video
          ref={videoRef}
          src={currentVideo || ''}
          className="video-stream"
          autoPlay
          muted={isMuted}
          playsInline
        />

        {/* –ö–Ω–æ–ø–∫–∞ –∑–≤—É–∫–∞ */}
        <button
          onClick={toggleVolumeSlider}
          className="sound-toggle-button"
          title={isMuted ? "–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫" : "–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫"}
        >
          {isMuted ? (
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M11 5L6 9H2V15H6L11 19V5Z" stroke="white" strokeWidth="2" fill="none"/>
              <path d="M15.5 8.5C16.5 9.5 17 11 17 12C17 13 16.5 14.5 15.5 15.5" stroke="white" strokeWidth="2" fill="none"/>
              <path d="M18 6C20 8 21 10 21 12C21 14 20 16 18 18" stroke="white" strokeWidth="2" fill="none"/>
              <line x1="2" y1="22" x2="22" y2="2" stroke="red" strokeWidth="2"/>
            </svg>
          ) : (
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M11 5L6 9H2V15H6L11 19V5Z" stroke="white" strokeWidth="2" fill="none"/>
              <path d="M15.5 8.5C16.5 9.5 17 11 17 12C17 13 16.5 14.5 15.5 15.5" stroke="white" strokeWidth="2" fill="none"/>
              <path d="M18 6C20 8 21 10 21 12C21 14 20 16 18 18" stroke="white" strokeWidth="2" fill="none"/>
            </svg>
          )}
        </button>

        {/* –ü–æ–ª–∑—É–Ω–æ–∫ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π */}
        <AnimatePresence>
          {showVolumeSlider && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              transition={{ duration: 0.2 }}
              className="volume-slider-container"
            >
              <input
                type="range"
                min="0"
                max="1"
                step="0.01"
                value={volume}
                onChange={handleVolumeChange}
                className="volume-slider"
                title="–ì—Ä–æ–º–∫–æ—Å—Ç—å"
              />
            </motion.div>
          )}
        </AnimatePresence>

        {/* –ë–ª—é—Ä–µ–Ω–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ */}
        <AnimatePresence>
          {showSimulatorOverlay && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.5 }}
              className="simulator-blur-overlay"
            >
                                                                                         <h2 className="simulator-blur-title desktop-title">üé≠ –°–∏–º—É–ª—è—Ç–æ—Ä WebCam –¢—Ä–∞–Ω—Å–ª—è—Ü–∏–π</h2>

                               <div className="simulator-blur-text">
                   <p className="desktop-text">
                     –•–æ—Ç–∏—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–æ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π?
                   </p>
                   <p className="desktop-text">
                     –¢–æ–≥–¥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
                   </p>
                   <p className="desktop-text">
                     –í—ã–±–∏—Ä–∞–π—Ç–µ –º–æ–¥–µ–ª—å –ø–æ –≤–∫—É—Å—É –∏ —Ç—Ä–∞—Ç—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–∏—Ö –∑–∞–≤–µ—Ç–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π.
                     –£–∂–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
                   </p>
                   
                   <p className="mobile-text">
                     –•–æ—Ç–∏—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–æ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π?
                   </p>
                   <p className="mobile-text">
                     –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –ø–æ–ª—É—á–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ 10 —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ —É –Ω–∞—Å –Ω–∞ —Å–∞–π—Ç–µ!
                   </p>
                 </div>

              <button
                onClick={() => {
                  const affomelodyURL = getAffomelodyURL();
                  window.open(affomelodyURL, '_blank');
                  setShowSimulatorOverlay(false);
                }}
                className="simulator-blur-button"
              >
                –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
              </button>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* –ü–æ–ª–æ—Å–∫–∞ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è –ø–æ–¥ –≤–∏–¥–µ–æ –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ */}
      <div className="excitement-bar-extension">
        <div className="excitement-bar-container">
          <div className="excitement-bar-label">
            <span className="excitement-icon">üî•</span>
            <span className="excitement-text">–í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ</span>
            <span className="excitement-percentage">{excitement}%</span>
          </div>
          <div className="excitement-bar">
            <div
              className="excitement-fill"
              style={{ width: `${excitement}%` }}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default ModelViewer;